;; Generated by boxworld generator
;; http://www.cs.rutgers.edu/~jasmuth/boxworld.tar.gz
;; by John Asmuth (jasmuth@cs.rutgers.edu)
;; modified: destination predicate is removed as it gives the goal

(define (domain boxworld)
 (:requirements :typing :equality :disjunctive-preconditions
                :probabilistic-effects :existential-preconditions
                :conditional-effects :negative-preconditions
                :universal-preconditions :rewards)
 (:types city box truck plane)
 (:predicates (box-at-city ?b - box ?c - city)
              (truck-at-city ?t - truck ?c - city)
              (box-on-truck ?b - box ?t - truck)
              (plane-at-city ?p - plane ?c - city)
              (box-on-plane ?b - box ?p - plane)
              (can-drive ?src - city ?dst - city)
              (wrong-drive1 ?src - city ?wrongdst - city)
              (wrong-drive2 ?src - city ?wrongdst - city)
              (can-fly ?src - city ?dst - city)

)
 (:action load-box-on-truck-in-city
  :parameters (?b - box ?t - truck ?c - city)
  :effect (when (and (box-at-city ?b ?c)
                               (truck-at-city ?t ?c)
                          )
(and (box-on-truck ?b ?t)
               (not (box-at-city ?b ?c))
                )
          )
 )
 (:action unload-box-from-truck-in-city
  :parameters (?b - box ?t - truck ?c - city)
  :effect (when (and (box-on-truck ?b ?t)
                               (truck-at-city ?t ?c)
                          )
                (and (box-at-city ?b ?c)
               (not (box-on-truck ?b ?t))
                )
          )
 )
 (:action load-box-on-plane-in-city
  :parameters (?b - box ?p - plane ?c - city)
  :effect (when (and (box-at-city ?b ?c)
                     (plane-at-city ?p ?c)
                )
                (and (box-on-plane ?b ?p)
               (not (box-at-city ?b ?c))
                )
          )
 )
 (:action unload-box-from-plane-in-city
  :parameters (?b - box ?p - plane ?c - city)
  :effect (when (and (box-on-plane ?b ?p)
                     (plane-at-city ?p ?c)
                )
                (and (box-at-city ?b ?c)
               (not (box-on-plane ?b ?p))
                )
          )
 )
 (:action drive-truck
  :parameters (?t - truck ?src - city ?dst - city)
  :effect (when (and (truck-at-city ?t ?src)
                     (can-drive ?src ?dst)
                )
          (and (not (truck-at-city ?t ?src))
               (probabilistic
                0.2 (forall (?wrongdst1 - city)
                    (when (wrong-drive1 ?src ?wrongdst1)
                    (forall (?wrongdst2 - city)
                    (when (wrong-drive2 ?src ?wrongdst2)
                     (probabilistic
                      1/2 (truck-at-city ?t ?wrongdst1)
                      1/2 (truck-at-city ?t ?wrongdst2)                      
                     )
                    ))))
                0.8 (truck-at-city ?t ?dst)
               )
          )
          )
 )
 (:action fly-plane
  :parameters (?p - plane ?src - city ?dst - city)
  :effect (when (and (plane-at-city ?p ?src)
                     (can-fly ?src ?dst)
                )
(and (not (plane-at-city ?p ?src))
               (plane-at-city ?p ?dst)
          )
 )
 )
)
